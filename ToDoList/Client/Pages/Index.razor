@page "/"
@using CurrieTechnologies.Razor.SweetAlert2;
@using ToDoList.Shared
@using Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IDialogService DialogService
@inject HttpClient http
@inject SweetAlertService Swal;
@attribute [Authorize]
@inject MyDataService DataService

<PageTitle>Index</PageTitle>














<MudGrid Style="padding:1">
    <MudItem xs="12" Style="display:flex;justify-content:center">
        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" @onclick="OpenDialog" Size="Size.Large" />
    </MudItem>  
</MudGrid>

<div class="container">
    
    
    @if (notes != null)
    {
                <MudGrid >
            @foreach (var note in notes)
            {
                    <MudItem xs="12">
                       
                        <NoteDetail Notes="note" OnNoteDeleted="HandleNoteDeleted" OnNoteEdited="HandleNoteEdited" />
                   
                    </MudItem>
            }
                </MudGrid>

                @*<NoteDetail Notes="note" OnNoteDeleted="HandleNoteDeleted" />*@
            
        
    }
    else
    {
        
       
    }
</div>

@if(notes== null)
{
    <MudAlert Severity="Severity.Info">You dont have Notes yet</MudAlert>
    <SurveyPrompt Title="How is Blazor working for you?" />
}


@code{
    List<Note> ?notes;
    public Note NotesModel=new Note();
    
    private async void HandleNoteEdited()
    {
        await RefreshNotes(); // Actualiza la lista de notas inmediatamente después de editar
        StateHasChanged();   // Notifica a Blazor para que vuelva a representar la página
    }
    private async void HandleNoteDeleted()
    {
        await RefreshNotes(); // Actualiza la lista de notas inmediatamente después de eliminar
        StateHasChanged();   // Notifica a Blazor para que vuelva a representar la página
    }
    private async void HandleNoteCreated(bool created)
    {
        if (created)
        {
            // Actualiza la lista de notas después de crear una nueva nota
            await RefreshNotes();
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        notes = await http.GetFromJsonAsync<List<Note>>("api/note");
        DataService.NoteCreated += HandleNoteCreated;

    }
    private async Task RefreshNotes()
    {
        notes = await http.GetFromJsonAsync<List<Note>>("api/note");
    }

    private  void OpenDialog()
    {

        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        var dialog=DialogService.Show<CreateNote>("New Note", closeOnEscapeKey);
        var result = dialog.Result;
        if (!result.IsCanceled)
        {        
            StateHasChanged();



        }


    }

   

}