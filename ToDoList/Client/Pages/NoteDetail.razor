@using Microsoft.AspNetCore.Components.Web;
@inject HttpClient http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@using CurrieTechnologies.Razor.SweetAlert2;
@inject SweetAlertService Swal;


@if (Notes != null)
{

        <MudCard Elevation="2" Class="rounded-lg" Style="z-index:-2"  @onclick="ToggleDrawer" >
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">@Notes.Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h4">@Notes.Description</MudText>
               
             

            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="DeleteNote" Color="Color.Secondary" Size="Size.Large" />
                <input type="checkbox" @onchange="Complete" @onclick:stopPropagation />
           
            </MudCardActions>

           




        </MudCard>

        <MudDrawer Breakpoint="Breakpoint.Lg" @bind-Open="@open" Anchor="Anchor.End"   DisableOverlay Elevation="3" Width="340px" Height="100%"  Variant="@DrawerVariant.Temporary" Style="z-index:0">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">List</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudPaper Elevation="1"  Class="m-3 p-2">
                    <MudText Typo="Typo.h4">
                        @Notes.Title
                    </MudText>
                </MudPaper>
      @*  <MudText Typo="Typo.h4">@Notes.Status</MudText>
        <MudText>Created: @Notes.CreatedAt.ToString("MM/dd/yyyy")</MudText>
        <MudText>Last Updated: @Notes.UpdatedAt.ToString("MM/dd/yyyy")</MudText>*@
            </MudNavMenu>
        </MudDrawer>

  
   
   

    

    
}

@code {
    @using ToDoList.Shared
    [Parameter]
    public Note? Notes { get; set; }
    [Parameter]
    public EventCallback OnNoteDeleted { get; set; }
    [Parameter]
    public EventCallback OnNoteEdited { get; set; }
    bool open;
  
    void ToggleDrawer()
    {
        open = !open;
    }
    private async Task Click()
    {
        Console.WriteLine("a");
    }

    private DateTime updatedTime;
    private bool isEditing = false;

    private async Task Complete(ChangeEventArgs arg)
    {
        updatedTime = DateTime.UtcNow;
        await http.PutAsJsonAsync($"api/note/Edit/{Notes.Id}",Notes);
        await OnNoteEdited.InvokeAsync();

    }
    protected override void OnInitialized()
    {
        // Inicializa updatedTime con la última fecha de actualización
        updatedTime = Notes.UpdatedAt;
        base.OnInitialized();
    }

    private async Task DeleteNote()
    {
        


        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Tarea",
                Text = "¿Deseas eliminar esta tarea?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (resultado.IsConfirmed)
        {
            // Lógica para eliminar la nota
            await http.DeleteAsync($"api/note/Delete/{Notes.Id}");
            await OnNoteDeleted.InvokeAsync();
        }
    }

    private async Task ToggleEditMode()
    {
        updatedTime = DateTime.UtcNow;
        isEditing = true;
    }

    private async Task SaveChanges()
    {
        // Lógica para guardar los cambios en la nota

        updatedTime = DateTime.UtcNow;
        isEditing = false;
    }
    public bool Size_CheckBox3 { get; set; } = false;
}